generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  image         String?
  name          String?
  email         String?   @unique
  password      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  emailVerified DateTime?

  Account Account[]
  Session Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  session_token String   @unique
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id    String @id @default(uuid()) @db.Uuid
  title String @db.Text
  image String @db.Text

  userProgress UserProgress[] @relation("CourseUserProgress")

  @@map("courses")
}

model UserProgress {
  id               String @id @default(uuid()) @db.Uuid
  userId           String @db.Uuid
  user_name        String @db.Text
  user_image       String @default("/mascot.svg") @db.Text
  active_course_id String @db.Uuid
  hearts           Int    @default(5)
  points           Int    @default(0)

  ActiveCourse Course @relation("CourseUserProgress", fields: [active_course_id], references: [id], onDelete: Cascade)

  @@map("users_progress")
}
