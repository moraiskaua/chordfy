generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  image         String?
  name          String?
  email         String?   @unique
  password      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  emailVerified DateTime?

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  session_token String   @unique
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserProgress {
  userId           String @id @db.Uuid
  active_course_id String @db.Uuid
  user_name        String @default("User")
  user_image       String @default("")
  hearts           Int    @default(5)
  points           Int    @default(0)

  activeCourse Course @relation("CourseUserProgress", fields: [active_course_id], references: [id], onDelete: Cascade)

  @@map("users_progress")
}

model Course {
  id    String @id @default(uuid()) @db.Uuid
  title String
  image String

  userProgress UserProgress[] @relation("CourseUserProgress")
  units        Unit[]

  @@map("courses")
}

model Unit {
  id          String @id @default(uuid()) @db.Uuid
  courseId    String @db.Uuid
  title       String
  description String
  order       Int

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("units")
}

model Lesson {
  id     String @id @default(uuid()) @db.Uuid
  unitId String @db.Uuid
  title  String
  order  Int

  unit       Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  challenges Challenge[]

  @@map("lessons")
}

model Challenge {
  id       String        @id @default(uuid()) @db.Uuid
  lessonId String        @db.Uuid
  question String
  order    Int
  type     ChallengeType

  lesson            Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  challengeOptions  ChallengeOption[]
  challengeProgress ChallengeProgress[]

  @@map("challenges")
}

enum ChallengeType {
  SELECT
  ASSIST
}

model ChallengeOption {
  id          String  @id @default(uuid()) @db.Uuid
  challengeId String  @db.Uuid
  text        String
  correct     Boolean @db.Boolean
  image       String
  audio       String

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_options")
}

model ChallengeProgress {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  challengeId String  @db.Uuid
  completed   Boolean @default(false) @db.Boolean

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_progress")
}

model UserSubscription {
  id                        String   @id @default(uuid()) @db.Uuid
  userId                    String   @db.Uuid
  stripe_customer_id        String   @unique
  stripe_subscription_id    String   @unique
  stripe_price_id           String
  stripe_current_period_end DateTime

  @@map("user_subscription")
}
